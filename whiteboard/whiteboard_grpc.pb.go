// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: whiteboard.proto

package whiteboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WhiteboardClient is the client API for Whiteboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhiteboardClient interface {
	AddDrawing(ctx context.Context, in *Drawing, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDrawings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Whiteboard_GetDrawingsClient, error)
	ConnectUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisconnectUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Undo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Redo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type whiteboardClient struct {
	cc grpc.ClientConnInterface
}

func NewWhiteboardClient(cc grpc.ClientConnInterface) WhiteboardClient {
	return &whiteboardClient{cc}
}

func (c *whiteboardClient) AddDrawing(ctx context.Context, in *Drawing, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/whiteboard.Whiteboard/AddDrawing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteboardClient) GetDrawings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Whiteboard_GetDrawingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Whiteboard_ServiceDesc.Streams[0], "/whiteboard.Whiteboard/GetDrawings", opts...)
	if err != nil {
		return nil, err
	}
	x := &whiteboardGetDrawingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Whiteboard_GetDrawingsClient interface {
	Recv() (*Drawing, error)
	grpc.ClientStream
}

type whiteboardGetDrawingsClient struct {
	grpc.ClientStream
}

func (x *whiteboardGetDrawingsClient) Recv() (*Drawing, error) {
	m := new(Drawing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *whiteboardClient) ConnectUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/whiteboard.Whiteboard/ConnectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteboardClient) DisconnectUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/whiteboard.Whiteboard/DisconnectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteboardClient) Undo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/whiteboard.Whiteboard/Undo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteboardClient) Redo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/whiteboard.Whiteboard/Redo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhiteboardServer is the server API for Whiteboard service.
// All implementations must embed UnimplementedWhiteboardServer
// for forward compatibility
type WhiteboardServer interface {
	AddDrawing(context.Context, *Drawing) (*emptypb.Empty, error)
	GetDrawings(*emptypb.Empty, Whiteboard_GetDrawingsServer) error
	ConnectUser(context.Context, *User) (*emptypb.Empty, error)
	DisconnectUser(context.Context, *User) (*emptypb.Empty, error)
	Undo(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Redo(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedWhiteboardServer()
}

// UnimplementedWhiteboardServer must be embedded to have forward compatible implementations.
type UnimplementedWhiteboardServer struct {
}

func (UnimplementedWhiteboardServer) AddDrawing(context.Context, *Drawing) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDrawing not implemented")
}
func (UnimplementedWhiteboardServer) GetDrawings(*emptypb.Empty, Whiteboard_GetDrawingsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDrawings not implemented")
}
func (UnimplementedWhiteboardServer) ConnectUser(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectUser not implemented")
}
func (UnimplementedWhiteboardServer) DisconnectUser(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectUser not implemented")
}
func (UnimplementedWhiteboardServer) Undo(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Undo not implemented")
}
func (UnimplementedWhiteboardServer) Redo(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redo not implemented")
}
func (UnimplementedWhiteboardServer) mustEmbedUnimplementedWhiteboardServer() {}

// UnsafeWhiteboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhiteboardServer will
// result in compilation errors.
type UnsafeWhiteboardServer interface {
	mustEmbedUnimplementedWhiteboardServer()
}

func RegisterWhiteboardServer(s grpc.ServiceRegistrar, srv WhiteboardServer) {
	s.RegisterService(&Whiteboard_ServiceDesc, srv)
}

func _Whiteboard_AddDrawing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Drawing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteboardServer).AddDrawing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whiteboard.Whiteboard/AddDrawing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteboardServer).AddDrawing(ctx, req.(*Drawing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whiteboard_GetDrawings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WhiteboardServer).GetDrawings(m, &whiteboardGetDrawingsServer{stream})
}

type Whiteboard_GetDrawingsServer interface {
	Send(*Drawing) error
	grpc.ServerStream
}

type whiteboardGetDrawingsServer struct {
	grpc.ServerStream
}

func (x *whiteboardGetDrawingsServer) Send(m *Drawing) error {
	return x.ServerStream.SendMsg(m)
}

func _Whiteboard_ConnectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteboardServer).ConnectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whiteboard.Whiteboard/ConnectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteboardServer).ConnectUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whiteboard_DisconnectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteboardServer).DisconnectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whiteboard.Whiteboard/DisconnectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteboardServer).DisconnectUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whiteboard_Undo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteboardServer).Undo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whiteboard.Whiteboard/Undo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteboardServer).Undo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whiteboard_Redo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteboardServer).Redo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whiteboard.Whiteboard/Redo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteboardServer).Redo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Whiteboard_ServiceDesc is the grpc.ServiceDesc for Whiteboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Whiteboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whiteboard.Whiteboard",
	HandlerType: (*WhiteboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDrawing",
			Handler:    _Whiteboard_AddDrawing_Handler,
		},
		{
			MethodName: "ConnectUser",
			Handler:    _Whiteboard_ConnectUser_Handler,
		},
		{
			MethodName: "DisconnectUser",
			Handler:    _Whiteboard_DisconnectUser_Handler,
		},
		{
			MethodName: "Undo",
			Handler:    _Whiteboard_Undo_Handler,
		},
		{
			MethodName: "Redo",
			Handler:    _Whiteboard_Redo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDrawings",
			Handler:       _Whiteboard_GetDrawings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "whiteboard.proto",
}
