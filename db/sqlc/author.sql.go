// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: author.sql

package tdb

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  password,
  name,
  email
) VALUES (
  $1, $2, $3
) RETURNING id, name, email, password, created_at, updated_at
`

type CreateAuthorParams struct {
	Password sql.NullString `json:"password"`
	Name     sql.NullString `json:"name"`
	Email    sql.NullString `json:"email"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Authors, error) {
	row := q.queryRow(ctx, q.createAuthorStmt, createAuthor, arg.Password, arg.Name, arg.Email)
	var i Authors
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, email, password, created_at, updated_at FROM authors
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, name sql.NullString) (Authors, error) {
	row := q.queryRow(ctx, q.getAuthorStmt, getAuthor, name)
	var i Authors
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors
SET
  password = COALESCE($1, password),
  name = COALESCE($2, name),
  email = COALESCE($3, email)
WHERE
  name = $2
RETURNING id, name, email, password, created_at, updated_at
`

type UpdateAuthorParams struct {
	Password sql.NullString `json:"password"`
	Name     sql.NullString `json:"name"`
	Email    sql.NullString `json:"email"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Authors, error) {
	row := q.queryRow(ctx, q.updateAuthorStmt, updateAuthor, arg.Password, arg.Name, arg.Email)
	var i Authors
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
